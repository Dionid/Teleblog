package views

import (
	"github.com/Dionid/teleblog/libs/teleblog"
	"github.com/Dionid/teleblog/cmd/teleblog/httpapi/views/partials"
	"github.com/Dionid/teleblog/libs/templu"
	"github.com/pocketbase/pocketbase/tools/types"
	"fmt"
	"math"
)

type InpexPagePost struct {
	teleblog.Post
	TgMessageRaw types.JsonMap `db:"tg_message_raw" json:"-"`
	CommentsCount int `db:"comments_count" json:"comments_count"`
	TgChatUsername string `db:"tg_chat_username" json:"tg_chat_username"`
	TextWithMarkup string `json:"text_with_markup"`
}

type PaginationData struct {
	Total int64
	PerPage int64
	CurrentPage int64
}

func (p *PaginationData) TotalPages() int {
	return int(math.Ceil(float64(p.Total) / float64(p.PerPage)))
}

templ Pagination(data PaginationData) {
	if data.TotalPages() < 7 {
		<div class="join">
			for i := 1; i <= data.TotalPages(); i++ {
				<a
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", i)) }
					class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", i == int(data.CurrentPage)), templ.KV("bg-white", i != int(data.CurrentPage)) }
				>{ fmt.Sprintf("%d", i) }</a>
			}
		</div>
	} else {
		<div class="join">
			<a
				href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", 1)) }
				class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", 1 == int(data.CurrentPage)), templ.KV("bg-white", 1 != int(data.CurrentPage)) }
			>
				1
			</a>
			if data.CurrentPage > 3 {
				<div
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					...
				</div>
			}
			if data.CurrentPage > 2 {
				<a
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage - 1)) }
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage - 1) }
				</a>
			}
			if data.CurrentPage != 1 && int(data.CurrentPage) != data.TotalPages() {
				<a
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage)) }
					class={ "join-item", "btn", "border-transparent", "btn-primary" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage) }
				</a>
			}
			if int(data.CurrentPage) < data.TotalPages() - 1 {
				<a
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage + 1)) }
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage + 1) }
				</a>
			}
			if int(data.CurrentPage) < data.TotalPages() - 2 {
				<div
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					...
				</div>
			}
			<a
				href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.TotalPages())) }
				class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", data.TotalPages() == int(data.CurrentPage)), templ.KV("bg-white", data.TotalPages() != int(data.CurrentPage)) }
			>
				{ fmt.Sprintf("%d", data.TotalPages()) }
			</a>
		</div>
	}
}

templ IndexPage(pagination PaginationData, posts []*InpexPagePost) {
	@BaseLayout() {
		<div class="flex flex-col w-full justify-center items-center">
			<div class="w-full flex justify-center max-w-6xl">
				<div class="w-full flex flex-col justify-center max-w-3xl">
					<div class="w-full p-3 sm:p-6">
						@partials.Header()
					</div>
					<div class="w-full flex flex-col justify-center p-3 sm:p-6">
						<div class="card bg-white">
							<div class="card-body flex-col p-4 items-center md:flex-row">
								<div class="avatar">
									<div class="w-24 rounded-full">
										<img src="/public/avatar.jpg" />
									</div>
								</div>
								<div class="p-2 sm:p-4">
									–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–î–∞–≤–∏–¥ –®–µ–∫—É–Ω—Ü</b>, —è ‚Äì Full-Stack Tech Lead –Ω–∞ Go & TS –∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ —Å –ø–æ—Å—Ç–∞–º–∏ –∏–∑ –º–æ–µ–π <a href="https://t.me/it_kachalka" target="_blank" class="border-b-2 border-dashed border-secondary">ü¶æ¬†IT-–ö–∞—á–∞–ª–∫–∏ üí™</a>
								</div>
							</div>
						</div>
						<script src={ templu.PathWithVersion(ctx, "/public/widgets/posts-list-widget.js") }></script>
						@templ.JSONScript("posts-list-widget-data", posts)
						<div id="posts-list-widget" class="flex flex-col w-full items-center pt-6">
							<div class="flex flex-col gap-4 w-full">
								<div class="flex w-full justify-between items-center">
									<div class="text-gray-500">
										–ü–æ—Å—Ç–æ–≤: { fmt.Sprintf("%d", pagination.Total) }
									</div>
									@Pagination(pagination)
								</div>
								for _, post := range posts {
									<div class="card bg-white w-full shadow-sm" :set={ fmt.Sprintf(`post = dataById["%s"]`, post.Id) }>
										<div class="card-body break-words p-6">
											<div class="flex justify-between items-end">
												<div class=" text-gray-400">
													{ post.Created.Time().Format("2006-01-02 15:04") }
												</div>
												<a class="btn btn-ghost btn-sm  right-0" target="_blank" href={ templ.SafeURL(fmt.Sprintf("https://t.me/%s/%d", post.TgChatUsername, post.TgMessageId)) }>
													<svg class="w-4 h-4 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
														<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961"/>
													</svg>
												</a>
											</div>
											<div class="whitespace-pre-line" v-html="post.text_with_markup" v-show="!post.collapsed">
												{ post.TextWithMarkup }
											</div>
											<div class="whitespace-pre-line" v-html="cropText(post.text_with_markup)" v-show="post.collapsed"></div>
											<div class="btn mt-4" v-show="post.collapsed" @click={ fmt.Sprintf("expandPostText('%s')", post.Id) }>
												–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
												<svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
													<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"/>
												</svg>
											</div>
											<div class="card-actions pt-3 justify-between">
												<a class="flex p-2 gap-2" href={ templ.SafeURL("/post/" + post.Id)}>
													{ fmt.Sprintf("%d", post.CommentsCount) }
													<svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
														<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17h6l3 3v-3h2V9h-2M4 4h11v8H9l-3 3v-3H4V4Z"/>
													</svg>
												</a>
												<a class="btn btn-sm btn-primary" href={ templ.SafeURL("/post/" + post.Id)} v-if="post.comments_count > 0">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
												<a class="btn btn-sm btn-ghost" href={ templ.SafeURL("/post/" + post.Id)} v-if="post.comments_count == 0">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
											</div>
										</div>
									</div>
								}
								<div class="flex w-full justify-center">
									@Pagination(pagination)
								</div>
							</div>
						</div>
					</div>
					<div class="w-full p-4 sm:p-6">
						@partials.Footer()
					</div>
				</div>
			</div>
		</div>
	}
}